/**
 * @fileoverview Схемы данных для модуля аутентификации
 * @author Буравов Илья (ilburale@gmail.com)
 */

/**
 * Интерфейс учетных данных пользователя для аутентификации.
 *
 * Содержит данные, необходимые для входа в систему.
 * Используется при авторизации пользователя через API.
 *
 * @example
 * ```typescript
 * const credentials: Credentials = {
 *   login: "user@example.com",
 *   password: "securePassword123"
 * };
 * 
 * await authAPI.login(credentials);
 * ```
 */
export interface Credentials {
  /**
   * Логин пользователя.
   *
   * Может быть email адресом, именем пользователя или другим
   * уникальным идентификатором, используемым для входа в систему.
   */
  login: string;

  /**
   * Пароль пользователя.
   *
   * Секретный ключ для аутентификации пользователя.
   * Должен соответствовать требованиям безопасности системы.
   */
  password: string;
}

/**
 * Интерфейс токенов аутентификации.
 *
 * Содержит пару токенов, возвращаемых сервером после успешной аутентификации.
 * Включает токен доступа для авторизации запросов и токен обновления
 * для получения новых токенов доступа.
 *
 * @example
 * ```typescript
 * const tokens: Tokens = {
 *   type: "Bearer",
 *   access: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
 *   refresh: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 * };
 * ```
 */
export interface Tokens {
  /**
   * Тип токена.
   *
   * Обычно "Bearer" для JWT токенов или другой тип,
   * используемый сервером для аутентификации.
   */
  type: string;

  /**
   * Токен доступа для авторизации запросов.
   *
   * Короткоживущий токен, используемый для авторизации
   * API запросов. Имеет ограниченное время жизни.
   */
  access: string;

  /**
   * Токен для обновления токена доступа.
   *
   * Долгоживущий токен, используемый для получения новых
   * токенов доступа без повторной аутентификации.
   */
  refresh: string;
}


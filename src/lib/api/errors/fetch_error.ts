/**
 * @fileoverview Базовый класс для HTTP ошибок и связанных интерфейсов
 * @author Буравов Илья (ilburale@gmail.com)
 */

/**
 * Интерфейс параметров для создания экземпляра FetchError.
 *
 * Содержит все необходимые данные для инициализации базовой HTTP ошибки.
 * Используется всеми специализированными классами ошибок.
 *
 * @example
 * ```typescript
 * const errorParams: FetchErrorParams = {
 *   message: "Ошибка соединения",
 *   detail: "Не удалось подключиться к серверу",
 *   status: 500
 * };
 * ```
 */
export interface FetchErrorParams {
  /**
   * Краткое сообщение об ошибке.
   *
   * Основное сообщение, которое будет отображено пользователю.
   * Если не указано, будет использовано сообщение по умолчанию.
   */
  message?: string;

  /**
   * Детальное сообщение об ошибке.
   *
   * Дополнительная информация об ошибке, полученная от сервера.
   * Может содержать технические детали для разработчиков.
   */
  detail?: string;

  /**
   * HTTP статус-код ответа.
   *
   * Стандартный HTTP статус-код, указывающий на тип ошибки.
   * Должен соответствовать спецификации HTTP.
   */
  status: number;
};

/**
 * Базовый класс для всех HTTP ошибок.
 *
 * Предоставляет общую структуру для обработки ошибок HTTP запросов.
 * Содержит HTTP статус-код и детальную информацию об ошибке.
 * Все специализированные классы ошибок наследуются от этого класса.
 *
 * @example
 * ```typescript
 * // Создание базовой ошибки
 * const error = new FetchError({
 *   message: "Ошибка соединения",
 *   detail: "Сервер недоступен",
 *   status: 500
 * });
 * 
 * console.log(error.message); // "Ошибка соединения (500) : Сервер недоступен"
 * console.log(error.status);  // 500
 * console.log(error.detail);  // "Сервер недоступен"
 * ```
 */
export class FetchError extends Error {
  /**
   * HTTP статус-код ответа.
   *
   * Содержит стандартный HTTP статус-код, указывающий на тип ошибки.
   * Значение устанавливается при создании экземпляра и не может быть изменено.
   */
  public readonly status: number;

  /**
   * Детальное сообщение об ошибке.
   *
   * Дополнительная информация об ошибке, полученная от сервера.
   * Может содержать технические детали для разработчиков.
   */
  public readonly detail?: string;

  /**
   * Создает новый экземпляр FetchError.
   *
   * Инициализирует базовую HTTP ошибку с указанными параметрами.
   * Сообщение об ошибке формируется автоматически на основе переданных данных.
   *
   * @param params - Параметры для инициализации ошибки
   *
   * @example
   * ```typescript
   * // Создание ошибки с сообщением по умолчанию
   * const error = new FetchError({
   *   detail: "Сервер перегружен",
   *   status: 503
   * });
   * 
   * // Создание ошибки с кастомным сообщением
   * const customError = new FetchError({
   *   message: "Не удалось загрузить данные",
   *   detail: "Файл поврежден",
   *   status: 400
   * });
   * ```
   */
  constructor({
    detail,
    message = "Возникла ошибка при обработке запроса на сервере",
    status
  }: FetchErrorParams) {
    super(`${message} (${status})${detail ? " : " + detail : "."}`);

    this.name = 'FetchError';
    this.status = status;
    this.detail = detail;
  }
}

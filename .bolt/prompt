---
description: SvelteKit rule
globs:
alwaysApply: true
---

# Svelte 5 & SvelteKit Development Expert

You are an AI expert in Svelte 5, SvelteKit, TypeScript, and modern web development. Your task is to provide accurate code, architectural recommendations, and best practice advice, strictly following the principles and conventions defined in your knowledge base.

## Core Principles
- Write concise, technically correct code with precise examples for Svelte 5 and SvelteKit
- Utilize SSR and SSG capabilities of SvelteKit
- Prioritize performance and JavaScript minimization
- Use descriptive variable names and follow accepted conventions

## Coding Standards

### Code Style
- Use functional and declarative patterns; avoid classes except for state machines
- Prefer iteration and modularization over code duplication

### Naming Conventions
- **Component files**: lowercase-with-hyphens (e.g., `auth-form.svelte`)
- **Component names**: PascalCase
- **Variables, functions, props**: camelCase

### TypeScript Usage
- Use TypeScript for all code
- Prefer `interfaces` over `types`
- Avoid `enums`, use `const objects`
- Include `strict mode` in `tsconfig.json`

## Svelte 5 Runes

### $state
Declaration of reactive state.
```typescript
let count = $state(0);
```

### $derived
Computation of derived values.
```typescript
let doubled = $derived(count * 2);
```

### $effect
Managing side effects and lifecycle.
```typescript
$effect(() => { 
  console.log(`Count is now ${count}`); 
});
```

### $props
Declaration of component props.
```typescript
let { optionalProp = 42, requiredProp } = $props();
```

### $bindable
Creating props with two-way binding.
```typescript
let { bindableProp = $bindable() } = $props();
```

### $inspect
Debugging reactive state (development only).
```typescript
$inspect(count);
```

## UI and Styling

### Styling Framework
- **Tailwind CSS**: Use utility-first approach
- **Shadcn**: Use for ready-made, customizable UI elements from `$lib/components/ui`
- **Styling Utility**: Use `cn()` from `$lib/utils` for organizing Tailwind classes

### Shadcn Color Conventions
Use CSS variables for colors in HSL format without the `hsl()` function:
- `--background`: Default background color
- `--foreground`: Default text color
- `--primary`: Primary color for buttons and accents
- `--primary-foreground`: Text color on primary color
- `--destructive`: Color for dangerous actions (deletion)
- `--ring`: Color for focus ring

## Project Architecture

### Project Structure
```
- src/
  - lib/       (for library code, components, utilities)
  - routes/    (for pages and API)
  - app.html
- static/
- svelte.config.js
- vite.config.js
```

### State Management
For complex state, use classes as state machines, exporting an instance:
```typescript
// counter.svelte.ts
class Counter {
  count = $state(0);
  increment() { this.count++; }
}
export const counter = new Counter();
```

### Routing
Use file system routing in `src/routes/`

### Data Fetching
Use `load` functions for server-side data fetching

### API Routes
Create in `src/routes/api/` directory

## Advanced Topics

### Performance Optimization
- Use `{#key}` blocks for forced re-rendering
- Implement code splitting through dynamic imports
- Minimize client-side JavaScript using SSR/SSG

### Forms and Actions
Use SvelteKit form actions for server-side form processing

### Internationalization
Use Paraglide.js for i18n as specified in documentation

### Accessibility
Ensure semantic HTML structure, keyboard support, and ARIA attributes

## Reference Documentation
- [Svelte 5 Runes](https://svelte-5-preview.vercel.app/docs/runes)
- [SvelteKit](https://kit.svelte.dev/docs)
- [Paraglide.js](https://inlang.com/m/gerre34r/library-inlang-paraglideJs)